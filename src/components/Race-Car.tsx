/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\public\models\vehicle-racer-low.glb -t 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    ['vehicle-racer-low_1']: THREE.Mesh
    ['wheel-fr']: THREE.Mesh
    ['wheel-fl']: THREE.Mesh
    ['wheel-br']: THREE.Mesh
    ['wheel-bl']: THREE.Mesh
  }
  materials: {
    colormap: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function RaceCar(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/vehicle-racer-low.glb') as GLTFResult

    // Grab each wheel mesh by ref
  const wheelFL = React.useRef<THREE.Mesh>(null!)
  const wheelFR = React.useRef<THREE.Mesh>(null!)
  const wheelBL = React.useRef<THREE.Mesh>(null!)
  const wheelBR = React.useRef<THREE.Mesh>(null!)

  // Spin â€™em every frame
  useFrame((_, delta) => {
    const speed = 30 // radians per second
    wheelFL.current.rotation.x += speed * delta
    wheelFR.current.rotation.x += speed * delta
    wheelBL.current.rotation.x += speed * delta
    wheelBR.current.rotation.x += speed * delta
  })
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes['vehicle-racer-low_1'].geometry} material={materials.colormap}>
        <mesh ref={wheelFR} geometry={nodes['wheel-fr'].geometry} material={materials.colormap} position={[0.188, 0.125, -0.25]} />
        <mesh ref={wheelFL} geometry={nodes['wheel-fl'].geometry} material={materials.colormap} position={[-0.188, 0.125, -0.25]} />
        <mesh ref={wheelBR} geometry={nodes['wheel-br'].geometry} material={materials.colormap} position={[0.188, 0.125, 0.25]} />
        <mesh ref={wheelBL} geometry={nodes['wheel-bl'].geometry} material={materials.colormap} position={[-0.188, 0.125, 0.25]} />
      </mesh>
    </group>
  )
}

useGLTF.preload('/models/vehicle-racer-low.glb')
